// Code generated by goa v3.21.1, DO NOT EDIT.
//
// query-svc HTTP client types
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-query-service/design

package client

import (
	querysvc "github.com/linuxfoundation/lfx-v2-query-service/gen/query_svc"
	goa "goa.design/goa/v3/pkg"
)

// QueryResourcesResponseBody is the type of the "query-svc" service
// "query-resources" endpoint HTTP response body.
type QueryResourcesResponseBody struct {
	// Resources found
	Resources []*ResourceResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	// Opaque token if more results are available
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty" xml:"page_token,omitempty"`
}

// QueryOrgsResponseBody is the type of the "query-svc" service "query-orgs"
// endpoint HTTP response body.
type QueryOrgsResponseBody struct {
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization industry classification
	Industry *string `form:"industry,omitempty" json:"industry,omitempty" xml:"industry,omitempty"`
	// Business sector classification
	Sector *string `form:"sector,omitempty" json:"sector,omitempty" xml:"sector,omitempty"`
	// Employee count or range
	Employees *string `form:"employees,omitempty" json:"employees,omitempty" xml:"employees,omitempty"`
}

// QueryResourcesBadRequestResponseBody is the type of the "query-svc" service
// "query-resources" endpoint HTTP response body for the "BadRequest" error.
type QueryResourcesBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// QueryResourcesInternalServerErrorResponseBody is the type of the "query-svc"
// service "query-resources" endpoint HTTP response body for the
// "InternalServerError" error.
type QueryResourcesInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// QueryResourcesServiceUnavailableResponseBody is the type of the "query-svc"
// service "query-resources" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type QueryResourcesServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// QueryOrgsBadRequestResponseBody is the type of the "query-svc" service
// "query-orgs" endpoint HTTP response body for the "BadRequest" error.
type QueryOrgsBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// QueryOrgsInternalServerErrorResponseBody is the type of the "query-svc"
// service "query-orgs" endpoint HTTP response body for the
// "InternalServerError" error.
type QueryOrgsInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// QueryOrgsServiceUnavailableResponseBody is the type of the "query-svc"
// service "query-orgs" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type QueryOrgsServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadyzNotReadyResponseBody is the type of the "query-svc" service "readyz"
// endpoint HTTP response body for the "NotReady" error.
type ReadyzNotReadyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResourceResponseBody is used to define fields on response body types.
type ResourceResponseBody struct {
	// Resource type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Resource ID (within its resource collection)
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Resource data snapshot
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// NewQueryResourcesResultOK builds a "query-svc" service "query-resources"
// endpoint result from a HTTP "OK" response.
func NewQueryResourcesResultOK(body *QueryResourcesResponseBody, cacheControl *string) *querysvc.QueryResourcesResult {
	v := &querysvc.QueryResourcesResult{
		PageToken: body.PageToken,
	}
	v.Resources = make([]*querysvc.Resource, len(body.Resources))
	for i, val := range body.Resources {
		v.Resources[i] = unmarshalResourceResponseBodyToQuerysvcResource(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewQueryResourcesBadRequest builds a query-svc service query-resources
// endpoint BadRequest error.
func NewQueryResourcesBadRequest(body *QueryResourcesBadRequestResponseBody) *querysvc.BadRequestError {
	v := &querysvc.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewQueryResourcesInternalServerError builds a query-svc service
// query-resources endpoint InternalServerError error.
func NewQueryResourcesInternalServerError(body *QueryResourcesInternalServerErrorResponseBody) *querysvc.InternalServerError {
	v := &querysvc.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewQueryResourcesServiceUnavailable builds a query-svc service
// query-resources endpoint ServiceUnavailable error.
func NewQueryResourcesServiceUnavailable(body *QueryResourcesServiceUnavailableResponseBody) *querysvc.ServiceUnavailableError {
	v := &querysvc.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewQueryOrgsOrganizationOK builds a "query-svc" service "query-orgs"
// endpoint result from a HTTP "OK" response.
func NewQueryOrgsOrganizationOK(body *QueryOrgsResponseBody) *querysvc.Organization {
	v := &querysvc.Organization{
		Name:      body.Name,
		Domain:    body.Domain,
		Industry:  body.Industry,
		Sector:    body.Sector,
		Employees: body.Employees,
	}

	return v
}

// NewQueryOrgsBadRequest builds a query-svc service query-orgs endpoint
// BadRequest error.
func NewQueryOrgsBadRequest(body *QueryOrgsBadRequestResponseBody) *querysvc.BadRequestError {
	v := &querysvc.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewQueryOrgsInternalServerError builds a query-svc service query-orgs
// endpoint InternalServerError error.
func NewQueryOrgsInternalServerError(body *QueryOrgsInternalServerErrorResponseBody) *querysvc.InternalServerError {
	v := &querysvc.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewQueryOrgsServiceUnavailable builds a query-svc service query-orgs
// endpoint ServiceUnavailable error.
func NewQueryOrgsServiceUnavailable(body *QueryOrgsServiceUnavailableResponseBody) *querysvc.ServiceUnavailableError {
	v := &querysvc.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewReadyzNotReady builds a query-svc service readyz endpoint NotReady error.
func NewReadyzNotReady(body *ReadyzNotReadyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateQueryResourcesResponseBody runs the validations defined on
// Query-ResourcesResponseBody
func ValidateQueryResourcesResponseBody(body *QueryResourcesResponseBody) (err error) {
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	return
}

// ValidateQueryResourcesBadRequestResponseBody runs the validations defined on
// query-resources_BadRequest_response_body
func ValidateQueryResourcesBadRequestResponseBody(body *QueryResourcesBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateQueryResourcesInternalServerErrorResponseBody runs the validations
// defined on query-resources_InternalServerError_response_body
func ValidateQueryResourcesInternalServerErrorResponseBody(body *QueryResourcesInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateQueryResourcesServiceUnavailableResponseBody runs the validations
// defined on query-resources_ServiceUnavailable_response_body
func ValidateQueryResourcesServiceUnavailableResponseBody(body *QueryResourcesServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateQueryOrgsBadRequestResponseBody runs the validations defined on
// query-orgs_BadRequest_response_body
func ValidateQueryOrgsBadRequestResponseBody(body *QueryOrgsBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateQueryOrgsInternalServerErrorResponseBody runs the validations
// defined on query-orgs_InternalServerError_response_body
func ValidateQueryOrgsInternalServerErrorResponseBody(body *QueryOrgsInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateQueryOrgsServiceUnavailableResponseBody runs the validations defined
// on query-orgs_ServiceUnavailable_response_body
func ValidateQueryOrgsServiceUnavailableResponseBody(body *QueryOrgsServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadyzNotReadyResponseBody runs the validations defined on
// readyz_NotReady_response_body
func ValidateReadyzNotReadyResponseBody(body *ReadyzNotReadyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
