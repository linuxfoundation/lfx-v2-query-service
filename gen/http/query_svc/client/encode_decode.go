// Code generated by goa v3.21.1, DO NOT EDIT.
//
// query-svc HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-query-service/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	querysvc "github.com/linuxfoundation/lfx-v2-query-service/gen/query_svc"
	goahttp "goa.design/goa/v3/http"
)

// BuildQueryResourcesRequest instantiates a HTTP request object with method
// and path set to call the "query-svc" service "query-resources" endpoint
func (c *Client) BuildQueryResourcesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: QueryResourcesQuerySvcPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("query-svc", "query-resources", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeQueryResourcesRequest returns an encoder for requests sent to the
// query-svc query-resources server.
func EncodeQueryResourcesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*querysvc.QueryResourcesPayload)
		if !ok {
			return goahttp.ErrInvalidType("query-svc", "query-resources", "*querysvc.QueryResourcesPayload", v)
		}
		{
			head := p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		if p.Name != nil {
			values.Add("name", *p.Name)
		}
		if p.Parent != nil {
			values.Add("parent", *p.Parent)
		}
		if p.Type != nil {
			values.Add("type", *p.Type)
		}
		for _, value := range p.Tags {
			values.Add("tags", value)
		}
		values.Add("sort", p.Sort)
		if p.PageToken != nil {
			values.Add("page_token", *p.PageToken)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeQueryResourcesResponse returns a decoder for responses returned by the
// query-svc query-resources endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeQueryResourcesResponse may return the following errors:
//   - "BadRequest" (type *querysvc.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *querysvc.InternalServerError): http.StatusInternalServerError
//   - "ServiceUnavailable" (type *querysvc.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeQueryResourcesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body QueryResourcesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-resources", err)
			}
			err = ValidateQueryResourcesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "query-resources", err)
			}
			var (
				cacheControl *string
			)
			cacheControlRaw := resp.Header.Get("Cache-Control")
			if cacheControlRaw != "" {
				cacheControl = &cacheControlRaw
			}
			res := NewQueryResourcesResultOK(&body, cacheControl)
			return res, nil
		case http.StatusBadRequest:
			var (
				body QueryResourcesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-resources", err)
			}
			err = ValidateQueryResourcesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "query-resources", err)
			}
			return nil, NewQueryResourcesBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body QueryResourcesInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-resources", err)
			}
			err = ValidateQueryResourcesInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "query-resources", err)
			}
			return nil, NewQueryResourcesInternalServerError(&body)
		case http.StatusServiceUnavailable:
			var (
				body QueryResourcesServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-resources", err)
			}
			err = ValidateQueryResourcesServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "query-resources", err)
			}
			return nil, NewQueryResourcesServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("query-svc", "query-resources", resp.StatusCode, string(body))
		}
	}
}

// BuildQueryOrgsRequest instantiates a HTTP request object with method and
// path set to call the "query-svc" service "query-orgs" endpoint
func (c *Client) BuildQueryOrgsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: QueryOrgsQuerySvcPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("query-svc", "query-orgs", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeQueryOrgsRequest returns an encoder for requests sent to the query-svc
// query-orgs server.
func EncodeQueryOrgsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*querysvc.QueryOrgsPayload)
		if !ok {
			return goahttp.ErrInvalidType("query-svc", "query-orgs", "*querysvc.QueryOrgsPayload", v)
		}
		{
			head := p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		if p.Name != nil {
			values.Add("name", *p.Name)
		}
		if p.Domain != nil {
			values.Add("domain", *p.Domain)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeQueryOrgsResponse returns a decoder for responses returned by the
// query-svc query-orgs endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeQueryOrgsResponse may return the following errors:
//   - "BadRequest" (type *querysvc.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *querysvc.InternalServerError): http.StatusInternalServerError
//   - "ServiceUnavailable" (type *querysvc.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeQueryOrgsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body QueryOrgsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-orgs", err)
			}
			res := NewQueryOrgsOrganizationOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body QueryOrgsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-orgs", err)
			}
			err = ValidateQueryOrgsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "query-orgs", err)
			}
			return nil, NewQueryOrgsBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body QueryOrgsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-orgs", err)
			}
			err = ValidateQueryOrgsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "query-orgs", err)
			}
			return nil, NewQueryOrgsInternalServerError(&body)
		case http.StatusServiceUnavailable:
			var (
				body QueryOrgsServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "query-orgs", err)
			}
			err = ValidateQueryOrgsServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "query-orgs", err)
			}
			return nil, NewQueryOrgsServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("query-svc", "query-orgs", resp.StatusCode, string(body))
		}
	}
}

// BuildReadyzRequest instantiates a HTTP request object with method and path
// set to call the "query-svc" service "readyz" endpoint
func (c *Client) BuildReadyzRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReadyzQuerySvcPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("query-svc", "readyz", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReadyzResponse returns a decoder for responses returned by the
// query-svc readyz endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeReadyzResponse may return the following errors:
//   - "NotReady" (type *goa.ServiceError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeReadyzResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "readyz", err)
			}
			return body, nil
		case http.StatusServiceUnavailable:
			var (
				body ReadyzNotReadyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "readyz", err)
			}
			err = ValidateReadyzNotReadyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("query-svc", "readyz", err)
			}
			return nil, NewReadyzNotReady(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("query-svc", "readyz", resp.StatusCode, string(body))
		}
	}
}

// BuildLivezRequest instantiates a HTTP request object with method and path
// set to call the "query-svc" service "livez" endpoint
func (c *Client) BuildLivezRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LivezQuerySvcPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("query-svc", "livez", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLivezResponse returns a decoder for responses returned by the
// query-svc livez endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeLivezResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("query-svc", "livez", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("query-svc", "livez", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResourceResponseBodyToQuerysvcResource builds a value of type
// *querysvc.Resource from a value of type *ResourceResponseBody.
func unmarshalResourceResponseBodyToQuerysvcResource(v *ResourceResponseBody) *querysvc.Resource {
	res := &querysvc.Resource{
		Type: v.Type,
		ID:   v.ID,
		Data: v.Data,
	}

	return res
}
