// Code generated by goa v3.21.1, DO NOT EDIT.
//
// query-svc client HTTP transport
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-query-service/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the query-svc service endpoint HTTP clients.
type Client struct {
	// QueryResources Doer is the HTTP client used to make requests to the
	// query-resources endpoint.
	QueryResourcesDoer goahttp.Doer

	// QueryResourcesCount Doer is the HTTP client used to make requests to the
	// query-resources-count endpoint.
	QueryResourcesCountDoer goahttp.Doer

	// QueryOrgs Doer is the HTTP client used to make requests to the query-orgs
	// endpoint.
	QueryOrgsDoer goahttp.Doer

	// SuggestOrgs Doer is the HTTP client used to make requests to the
	// suggest-orgs endpoint.
	SuggestOrgsDoer goahttp.Doer

	// Readyz Doer is the HTTP client used to make requests to the readyz endpoint.
	ReadyzDoer goahttp.Doer

	// Livez Doer is the HTTP client used to make requests to the livez endpoint.
	LivezDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the query-svc service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		QueryResourcesDoer:      doer,
		QueryResourcesCountDoer: doer,
		QueryOrgsDoer:           doer,
		SuggestOrgsDoer:         doer,
		ReadyzDoer:              doer,
		LivezDoer:               doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// QueryResources returns an endpoint that makes HTTP requests to the query-svc
// service query-resources server.
func (c *Client) QueryResources() goa.Endpoint {
	var (
		encodeRequest  = EncodeQueryResourcesRequest(c.encoder)
		decodeResponse = DecodeQueryResourcesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildQueryResourcesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.QueryResourcesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("query-svc", "query-resources", err)
		}
		return decodeResponse(resp)
	}
}

// QueryResourcesCount returns an endpoint that makes HTTP requests to the
// query-svc service query-resources-count server.
func (c *Client) QueryResourcesCount() goa.Endpoint {
	var (
		encodeRequest  = EncodeQueryResourcesCountRequest(c.encoder)
		decodeResponse = DecodeQueryResourcesCountResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildQueryResourcesCountRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.QueryResourcesCountDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("query-svc", "query-resources-count", err)
		}
		return decodeResponse(resp)
	}
}

// QueryOrgs returns an endpoint that makes HTTP requests to the query-svc
// service query-orgs server.
func (c *Client) QueryOrgs() goa.Endpoint {
	var (
		encodeRequest  = EncodeQueryOrgsRequest(c.encoder)
		decodeResponse = DecodeQueryOrgsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildQueryOrgsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.QueryOrgsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("query-svc", "query-orgs", err)
		}
		return decodeResponse(resp)
	}
}

// SuggestOrgs returns an endpoint that makes HTTP requests to the query-svc
// service suggest-orgs server.
func (c *Client) SuggestOrgs() goa.Endpoint {
	var (
		encodeRequest  = EncodeSuggestOrgsRequest(c.encoder)
		decodeResponse = DecodeSuggestOrgsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSuggestOrgsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SuggestOrgsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("query-svc", "suggest-orgs", err)
		}
		return decodeResponse(resp)
	}
}

// Readyz returns an endpoint that makes HTTP requests to the query-svc service
// readyz server.
func (c *Client) Readyz() goa.Endpoint {
	var (
		decodeResponse = DecodeReadyzResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReadyzRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReadyzDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("query-svc", "readyz", err)
		}
		return decodeResponse(resp)
	}
}

// Livez returns an endpoint that makes HTTP requests to the query-svc service
// livez server.
func (c *Client) Livez() goa.Endpoint {
	var (
		decodeResponse = DecodeLivezResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLivezRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LivezDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("query-svc", "livez", err)
		}
		return decodeResponse(resp)
	}
}
