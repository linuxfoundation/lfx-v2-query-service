// Code generated by goa v3.21.1, DO NOT EDIT.
//
// query-svc HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-query-service/design

package server

import (
	"context"
	"errors"
	"net/http"
	"strings"
	"unicode/utf8"

	querysvc "github.com/linuxfoundation/lfx-v2-query-service/gen/query_svc"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeQueryResourcesResponse returns an encoder for responses returned by
// the query-svc query-resources endpoint.
func EncodeQueryResourcesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*querysvc.QueryResourcesResult)
		enc := encoder(ctx, w)
		body := NewQueryResourcesResponseBody(res)
		if res.CacheControl != nil {
			w.Header().Set("Cache-Control", *res.CacheControl)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeQueryResourcesRequest returns a decoder for requests sent to the
// query-svc query-resources endpoint.
func DecodeQueryResourcesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			version     string
			name        *string
			parent      *string
			type_       *string
			tags        []string
			sort        string
			pageToken   *string
			bearerToken string
			err         error
		)
		qp := r.URL.Query()
		version = qp.Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		nameRaw := qp.Get("name")
		if nameRaw != "" {
			name = &nameRaw
		}
		if name != nil {
			if utf8.RuneCountInString(*name) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("name", *name, utf8.RuneCountInString(*name), 1, true))
			}
		}
		parentRaw := qp.Get("parent")
		if parentRaw != "" {
			parent = &parentRaw
		}
		if parent != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("parent", *parent, "^[a-zA-Z]+:[a-zA-Z0-9_-]+$"))
		}
		type_Raw := qp.Get("type")
		if type_Raw != "" {
			type_ = &type_Raw
		}
		tags = qp["tags"]
		sortRaw := qp.Get("sort")
		if sortRaw != "" {
			sort = sortRaw
		} else {
			sort = "name_asc"
		}
		if !(sort == "name_asc" || sort == "name_desc" || sort == "updated_asc" || sort == "updated_desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("sort", sort, []any{"name_asc", "name_desc", "updated_asc", "updated_desc"}))
		}
		pageTokenRaw := qp.Get("page_token")
		if pageTokenRaw != "" {
			pageToken = &pageTokenRaw
		}
		bearerToken = r.Header.Get("Authorization")
		if bearerToken == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("bearer_token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewQueryResourcesPayload(version, name, parent, type_, tags, sort, pageToken, bearerToken)
		if strings.Contains(payload.BearerToken, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.BearerToken, " ", 2)[1]
			payload.BearerToken = cred
		}

		return payload, nil
	}
}

// EncodeQueryResourcesError returns an encoder for errors returned by the
// query-resources query-svc endpoint.
func EncodeQueryResourcesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *querysvc.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewQueryResourcesBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "InternalServerError":
			var res *querysvc.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewQueryResourcesInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *querysvc.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewQueryResourcesServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeQueryOrgsResponse returns an encoder for responses returned by the
// query-svc query-orgs endpoint.
func EncodeQueryOrgsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*querysvc.Organization)
		enc := encoder(ctx, w)
		body := NewQueryOrgsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeQueryOrgsRequest returns a decoder for requests sent to the query-svc
// query-orgs endpoint.
func DecodeQueryOrgsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			version     string
			name        *string
			domain      *string
			bearerToken string
			err         error
		)
		qp := r.URL.Query()
		version = qp.Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		nameRaw := qp.Get("name")
		if nameRaw != "" {
			name = &nameRaw
		}
		if name != nil {
			if utf8.RuneCountInString(*name) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("name", *name, utf8.RuneCountInString(*name), 1, true))
			}
		}
		domainRaw := qp.Get("domain")
		if domainRaw != "" {
			domain = &domainRaw
		}
		if domain != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("domain", *domain, "^[a-zA-Z0-9][a-zA-Z0-9-_.]*[a-zA-Z0-9]*\\.[a-zA-Z]{2,}$"))
		}
		bearerToken = r.Header.Get("Authorization")
		if bearerToken == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("bearer_token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewQueryOrgsPayload(version, name, domain, bearerToken)
		if strings.Contains(payload.BearerToken, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.BearerToken, " ", 2)[1]
			payload.BearerToken = cred
		}

		return payload, nil
	}
}

// EncodeQueryOrgsError returns an encoder for errors returned by the
// query-orgs query-svc endpoint.
func EncodeQueryOrgsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *querysvc.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewQueryOrgsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "InternalServerError":
			var res *querysvc.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewQueryOrgsInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *querysvc.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewQueryOrgsServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReadyzResponse returns an encoder for responses returned by the
// query-svc readyz endpoint.
func EncodeReadyzResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeReadyzError returns an encoder for errors returned by the readyz
// query-svc endpoint.
func EncodeReadyzError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotReady":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewReadyzNotReadyResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLivezResponse returns an encoder for responses returned by the
// query-svc livez endpoint.
func EncodeLivezResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalQuerysvcResourceToResourceResponseBody builds a value of type
// *ResourceResponseBody from a value of type *querysvc.Resource.
func marshalQuerysvcResourceToResourceResponseBody(v *querysvc.Resource) *ResourceResponseBody {
	res := &ResourceResponseBody{
		Type: v.Type,
		ID:   v.ID,
		Data: v.Data,
	}

	return res
}
