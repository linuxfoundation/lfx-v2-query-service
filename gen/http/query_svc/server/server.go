// Code generated by goa v3.21.1, DO NOT EDIT.
//
// query-svc HTTP server
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-query-service/design

package server

import (
	"context"
	"net/http"
	"path"

	querysvc "github.com/linuxfoundation/lfx-v2-query-service/gen/query_svc"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the query-svc service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	QueryResources      http.Handler
	QueryOrgs           http.Handler
	Readyz              http.Handler
	Livez               http.Handler
	GenHTTPOpenapiJSON  http.Handler
	GenHTTPOpenapiYaml  http.Handler
	GenHTTPOpenapi3JSON http.Handler
	GenHTTPOpenapi3Yaml http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the query-svc service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *querysvc.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapiJSON http.FileSystem,
	fileSystemGenHTTPOpenapiYaml http.FileSystem,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
	fileSystemGenHTTPOpenapi3Yaml http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapiJSON == nil {
		fileSystemGenHTTPOpenapiJSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapiJSON = appendPrefix(fileSystemGenHTTPOpenapiJSON, "/gen/http")
	if fileSystemGenHTTPOpenapiYaml == nil {
		fileSystemGenHTTPOpenapiYaml = http.Dir(".")
	}
	fileSystemGenHTTPOpenapiYaml = appendPrefix(fileSystemGenHTTPOpenapiYaml, "/gen/http")
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	if fileSystemGenHTTPOpenapi3Yaml == nil {
		fileSystemGenHTTPOpenapi3Yaml = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3Yaml = appendPrefix(fileSystemGenHTTPOpenapi3Yaml, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"QueryResources", "GET", "/query/resources"},
			{"QueryOrgs", "GET", "/query/orgs"},
			{"Readyz", "GET", "/readyz"},
			{"Livez", "GET", "/livez"},
			{"Serve gen/http/openapi.json", "GET", "/_query/openapi.json"},
			{"Serve gen/http/openapi.yaml", "GET", "/_query/openapi.yaml"},
			{"Serve gen/http/openapi3.json", "GET", "/_query/openapi3.json"},
			{"Serve gen/http/openapi3.yaml", "GET", "/_query/openapi3.yaml"},
		},
		QueryResources:      NewQueryResourcesHandler(e.QueryResources, mux, decoder, encoder, errhandler, formatter),
		QueryOrgs:           NewQueryOrgsHandler(e.QueryOrgs, mux, decoder, encoder, errhandler, formatter),
		Readyz:              NewReadyzHandler(e.Readyz, mux, decoder, encoder, errhandler, formatter),
		Livez:               NewLivezHandler(e.Livez, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapiJSON:  http.FileServer(fileSystemGenHTTPOpenapiJSON),
		GenHTTPOpenapiYaml:  http.FileServer(fileSystemGenHTTPOpenapiYaml),
		GenHTTPOpenapi3JSON: http.FileServer(fileSystemGenHTTPOpenapi3JSON),
		GenHTTPOpenapi3Yaml: http.FileServer(fileSystemGenHTTPOpenapi3Yaml),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "query-svc" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.QueryResources = m(s.QueryResources)
	s.QueryOrgs = m(s.QueryOrgs)
	s.Readyz = m(s.Readyz)
	s.Livez = m(s.Livez)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return querysvc.MethodNames[:] }

// Mount configures the mux to serve the query-svc endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountQueryResourcesHandler(mux, h.QueryResources)
	MountQueryOrgsHandler(mux, h.QueryOrgs)
	MountReadyzHandler(mux, h.Readyz)
	MountLivezHandler(mux, h.Livez)
	MountGenHTTPOpenapiJSON(mux, http.StripPrefix("/_query", h.GenHTTPOpenapiJSON))
	MountGenHTTPOpenapiYaml(mux, http.StripPrefix("/_query", h.GenHTTPOpenapiYaml))
	MountGenHTTPOpenapi3JSON(mux, http.StripPrefix("/_query", h.GenHTTPOpenapi3JSON))
	MountGenHTTPOpenapi3Yaml(mux, http.StripPrefix("/_query", h.GenHTTPOpenapi3Yaml))
}

// Mount configures the mux to serve the query-svc endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountQueryResourcesHandler configures the mux to serve the "query-svc"
// service "query-resources" endpoint.
func MountQueryResourcesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/resources", f)
}

// NewQueryResourcesHandler creates a HTTP handler which loads the HTTP request
// and calls the "query-svc" service "query-resources" endpoint.
func NewQueryResourcesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeQueryResourcesRequest(mux, decoder)
		encodeResponse = EncodeQueryResourcesResponse(encoder)
		encodeError    = EncodeQueryResourcesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "query-resources")
		ctx = context.WithValue(ctx, goa.ServiceKey, "query-svc")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountQueryOrgsHandler configures the mux to serve the "query-svc" service
// "query-orgs" endpoint.
func MountQueryOrgsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/orgs", f)
}

// NewQueryOrgsHandler creates a HTTP handler which loads the HTTP request and
// calls the "query-svc" service "query-orgs" endpoint.
func NewQueryOrgsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeQueryOrgsRequest(mux, decoder)
		encodeResponse = EncodeQueryOrgsResponse(encoder)
		encodeError    = EncodeQueryOrgsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "query-orgs")
		ctx = context.WithValue(ctx, goa.ServiceKey, "query-svc")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReadyzHandler configures the mux to serve the "query-svc" service
// "readyz" endpoint.
func MountReadyzHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/readyz", f)
}

// NewReadyzHandler creates a HTTP handler which loads the HTTP request and
// calls the "query-svc" service "readyz" endpoint.
func NewReadyzHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeReadyzResponse(encoder)
		encodeError    = EncodeReadyzError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "readyz")
		ctx = context.WithValue(ctx, goa.ServiceKey, "query-svc")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLivezHandler configures the mux to serve the "query-svc" service
// "livez" endpoint.
func MountLivezHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/livez", f)
}

// NewLivezHandler creates a HTTP handler which loads the HTTP request and
// calls the "query-svc" service "livez" endpoint.
func NewLivezHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeLivezResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "livez")
		ctx = context.WithValue(ctx, goa.ServiceKey, "query-svc")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/_query/openapi.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_query/openapi.json", h.ServeHTTP)
}

// MountGenHTTPOpenapiYaml configures the mux to serve GET request made to
// "/_query/openapi.yaml".
func MountGenHTTPOpenapiYaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_query/openapi.yaml", h.ServeHTTP)
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/_query/openapi3.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_query/openapi3.json", h.ServeHTTP)
}

// MountGenHTTPOpenapi3Yaml configures the mux to serve GET request made to
// "/_query/openapi3.yaml".
func MountGenHTTPOpenapi3Yaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_query/openapi3.yaml", h.ServeHTTP)
}
