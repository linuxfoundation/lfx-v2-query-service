// Code generated by goa v3.21.1, DO NOT EDIT.
//
// query-svc HTTP server types
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-query-service/design

package server

import (
	querysvc "github.com/linuxfoundation/lfx-v2-query-service/gen/query_svc"
	goa "goa.design/goa/v3/pkg"
)

// QueryResourcesResponseBody is the type of the "query-svc" service
// "query-resources" endpoint HTTP response body.
type QueryResourcesResponseBody struct {
	// Resources found
	Resources []*ResourceResponseBody `form:"resources" json:"resources" xml:"resources"`
	// Opaque token if more results are available
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty" xml:"page_token,omitempty"`
}

// QueryResourcesCountResponseBody is the type of the "query-svc" service
// "query-resources-count" endpoint HTTP response body.
type QueryResourcesCountResponseBody struct {
	// Count of resources found
	Count uint64 `form:"count" json:"count" xml:"count"`
	// True if count is not guaranteed to be exhaustive: client should request a
	// narrower query
	HasMore bool `form:"has_more" json:"has_more" xml:"has_more"`
}

// QueryOrgsResponseBody is the type of the "query-svc" service "query-orgs"
// endpoint HTTP response body.
type QueryOrgsResponseBody struct {
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization industry classification
	Industry *string `form:"industry,omitempty" json:"industry,omitempty" xml:"industry,omitempty"`
	// Business sector classification
	Sector *string `form:"sector,omitempty" json:"sector,omitempty" xml:"sector,omitempty"`
	// Employee count or range
	Employees *string `form:"employees,omitempty" json:"employees,omitempty" xml:"employees,omitempty"`
}

// SuggestOrgsResponseBody is the type of the "query-svc" service
// "suggest-orgs" endpoint HTTP response body.
type SuggestOrgsResponseBody struct {
	// Organization suggestions
	Suggestions []*OrganizationSuggestionResponseBody `form:"suggestions" json:"suggestions" xml:"suggestions"`
}

// QueryResourcesBadRequestResponseBody is the type of the "query-svc" service
// "query-resources" endpoint HTTP response body for the "BadRequest" error.
type QueryResourcesBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryResourcesInternalServerErrorResponseBody is the type of the "query-svc"
// service "query-resources" endpoint HTTP response body for the
// "InternalServerError" error.
type QueryResourcesInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryResourcesServiceUnavailableResponseBody is the type of the "query-svc"
// service "query-resources" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type QueryResourcesServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryResourcesCountBadRequestResponseBody is the type of the "query-svc"
// service "query-resources-count" endpoint HTTP response body for the
// "BadRequest" error.
type QueryResourcesCountBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// QueryResourcesCountInternalServerErrorResponseBody is the type of the
// "query-svc" service "query-resources-count" endpoint HTTP response body for
// the "InternalServerError" error.
type QueryResourcesCountInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryResourcesCountServiceUnavailableResponseBody is the type of the
// "query-svc" service "query-resources-count" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type QueryResourcesCountServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryOrgsBadRequestResponseBody is the type of the "query-svc" service
// "query-orgs" endpoint HTTP response body for the "BadRequest" error.
type QueryOrgsBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryOrgsInternalServerErrorResponseBody is the type of the "query-svc"
// service "query-orgs" endpoint HTTP response body for the
// "InternalServerError" error.
type QueryOrgsInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryOrgsNotFoundResponseBody is the type of the "query-svc" service
// "query-orgs" endpoint HTTP response body for the "NotFound" error.
type QueryOrgsNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// QueryOrgsServiceUnavailableResponseBody is the type of the "query-svc"
// service "query-orgs" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type QueryOrgsServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// SuggestOrgsBadRequestResponseBody is the type of the "query-svc" service
// "suggest-orgs" endpoint HTTP response body for the "BadRequest" error.
type SuggestOrgsBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// SuggestOrgsInternalServerErrorResponseBody is the type of the "query-svc"
// service "suggest-orgs" endpoint HTTP response body for the
// "InternalServerError" error.
type SuggestOrgsInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// SuggestOrgsServiceUnavailableResponseBody is the type of the "query-svc"
// service "suggest-orgs" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type SuggestOrgsServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// ReadyzNotReadyResponseBody is the type of the "query-svc" service "readyz"
// endpoint HTTP response body for the "NotReady" error.
type ReadyzNotReadyResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResourceResponseBody is used to define fields on response body types.
type ResourceResponseBody struct {
	// Resource type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Resource ID (within its resource collection)
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Resource data snapshot
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// OrganizationSuggestionResponseBody is used to define fields on response body
// types.
type OrganizationSuggestionResponseBody struct {
	// Organization name
	Name string `form:"name" json:"name" xml:"name"`
	// Organization domain
	Domain string `form:"domain" json:"domain" xml:"domain"`
	// Organization logo URL
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
}

// NewQueryResourcesResponseBody builds the HTTP response body from the result
// of the "query-resources" endpoint of the "query-svc" service.
func NewQueryResourcesResponseBody(res *querysvc.QueryResourcesResult) *QueryResourcesResponseBody {
	body := &QueryResourcesResponseBody{
		PageToken: res.PageToken,
	}
	if res.Resources != nil {
		body.Resources = make([]*ResourceResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalQuerysvcResourceToResourceResponseBody(val)
		}
	} else {
		body.Resources = []*ResourceResponseBody{}
	}
	return body
}

// NewQueryResourcesCountResponseBody builds the HTTP response body from the
// result of the "query-resources-count" endpoint of the "query-svc" service.
func NewQueryResourcesCountResponseBody(res *querysvc.QueryResourcesCountResult) *QueryResourcesCountResponseBody {
	body := &QueryResourcesCountResponseBody{
		Count:   res.Count,
		HasMore: res.HasMore,
	}
	return body
}

// NewQueryOrgsResponseBody builds the HTTP response body from the result of
// the "query-orgs" endpoint of the "query-svc" service.
func NewQueryOrgsResponseBody(res *querysvc.Organization) *QueryOrgsResponseBody {
	body := &QueryOrgsResponseBody{
		Name:      res.Name,
		Domain:    res.Domain,
		Industry:  res.Industry,
		Sector:    res.Sector,
		Employees: res.Employees,
	}
	return body
}

// NewSuggestOrgsResponseBody builds the HTTP response body from the result of
// the "suggest-orgs" endpoint of the "query-svc" service.
func NewSuggestOrgsResponseBody(res *querysvc.SuggestOrgsResult) *SuggestOrgsResponseBody {
	body := &SuggestOrgsResponseBody{}
	if res.Suggestions != nil {
		body.Suggestions = make([]*OrganizationSuggestionResponseBody, len(res.Suggestions))
		for i, val := range res.Suggestions {
			body.Suggestions[i] = marshalQuerysvcOrganizationSuggestionToOrganizationSuggestionResponseBody(val)
		}
	} else {
		body.Suggestions = []*OrganizationSuggestionResponseBody{}
	}
	return body
}

// NewQueryResourcesBadRequestResponseBody builds the HTTP response body from
// the result of the "query-resources" endpoint of the "query-svc" service.
func NewQueryResourcesBadRequestResponseBody(res *querysvc.BadRequestError) *QueryResourcesBadRequestResponseBody {
	body := &QueryResourcesBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryResourcesInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "query-resources" endpoint of the "query-svc"
// service.
func NewQueryResourcesInternalServerErrorResponseBody(res *querysvc.InternalServerError) *QueryResourcesInternalServerErrorResponseBody {
	body := &QueryResourcesInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryResourcesServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "query-resources" endpoint of the "query-svc"
// service.
func NewQueryResourcesServiceUnavailableResponseBody(res *querysvc.ServiceUnavailableError) *QueryResourcesServiceUnavailableResponseBody {
	body := &QueryResourcesServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryResourcesCountBadRequestResponseBody builds the HTTP response body
// from the result of the "query-resources-count" endpoint of the "query-svc"
// service.
func NewQueryResourcesCountBadRequestResponseBody(res *goa.ServiceError) *QueryResourcesCountBadRequestResponseBody {
	body := &QueryResourcesCountBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewQueryResourcesCountInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "query-resources-count" endpoint of the
// "query-svc" service.
func NewQueryResourcesCountInternalServerErrorResponseBody(res *querysvc.InternalServerError) *QueryResourcesCountInternalServerErrorResponseBody {
	body := &QueryResourcesCountInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryResourcesCountServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "query-resources-count" endpoint of the
// "query-svc" service.
func NewQueryResourcesCountServiceUnavailableResponseBody(res *querysvc.ServiceUnavailableError) *QueryResourcesCountServiceUnavailableResponseBody {
	body := &QueryResourcesCountServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryOrgsBadRequestResponseBody builds the HTTP response body from the
// result of the "query-orgs" endpoint of the "query-svc" service.
func NewQueryOrgsBadRequestResponseBody(res *querysvc.BadRequestError) *QueryOrgsBadRequestResponseBody {
	body := &QueryOrgsBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryOrgsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "query-orgs" endpoint of the "query-svc" service.
func NewQueryOrgsInternalServerErrorResponseBody(res *querysvc.InternalServerError) *QueryOrgsInternalServerErrorResponseBody {
	body := &QueryOrgsInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryOrgsNotFoundResponseBody builds the HTTP response body from the
// result of the "query-orgs" endpoint of the "query-svc" service.
func NewQueryOrgsNotFoundResponseBody(res *querysvc.NotFoundError) *QueryOrgsNotFoundResponseBody {
	body := &QueryOrgsNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewQueryOrgsServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "query-orgs" endpoint of the "query-svc" service.
func NewQueryOrgsServiceUnavailableResponseBody(res *querysvc.ServiceUnavailableError) *QueryOrgsServiceUnavailableResponseBody {
	body := &QueryOrgsServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewSuggestOrgsBadRequestResponseBody builds the HTTP response body from the
// result of the "suggest-orgs" endpoint of the "query-svc" service.
func NewSuggestOrgsBadRequestResponseBody(res *querysvc.BadRequestError) *SuggestOrgsBadRequestResponseBody {
	body := &SuggestOrgsBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewSuggestOrgsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "suggest-orgs" endpoint of the "query-svc" service.
func NewSuggestOrgsInternalServerErrorResponseBody(res *querysvc.InternalServerError) *SuggestOrgsInternalServerErrorResponseBody {
	body := &SuggestOrgsInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewSuggestOrgsServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "suggest-orgs" endpoint of the "query-svc" service.
func NewSuggestOrgsServiceUnavailableResponseBody(res *querysvc.ServiceUnavailableError) *SuggestOrgsServiceUnavailableResponseBody {
	body := &SuggestOrgsServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewReadyzNotReadyResponseBody builds the HTTP response body from the result
// of the "readyz" endpoint of the "query-svc" service.
func NewReadyzNotReadyResponseBody(res *goa.ServiceError) *ReadyzNotReadyResponseBody {
	body := &ReadyzNotReadyResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewQueryResourcesPayload builds a query-svc service query-resources endpoint
// payload.
func NewQueryResourcesPayload(version string, name *string, parent *string, type_ *string, tags []string, sort string, pageToken *string, bearerToken string) *querysvc.QueryResourcesPayload {
	v := &querysvc.QueryResourcesPayload{}
	v.Version = version
	v.Name = name
	v.Parent = parent
	v.Type = type_
	v.Tags = tags
	v.Sort = sort
	v.PageToken = pageToken
	v.BearerToken = bearerToken

	return v
}

// NewQueryResourcesCountPayload builds a query-svc service
// query-resources-count endpoint payload.
func NewQueryResourcesCountPayload(version string, name *string, parent *string, type_ *string, tags []string, bearerToken string) *querysvc.QueryResourcesCountPayload {
	v := &querysvc.QueryResourcesCountPayload{}
	v.Version = version
	v.Name = name
	v.Parent = parent
	v.Type = type_
	v.Tags = tags
	v.BearerToken = bearerToken

	return v
}

// NewQueryOrgsPayload builds a query-svc service query-orgs endpoint payload.
func NewQueryOrgsPayload(version string, name *string, domain *string, bearerToken string) *querysvc.QueryOrgsPayload {
	v := &querysvc.QueryOrgsPayload{}
	v.Version = version
	v.Name = name
	v.Domain = domain
	v.BearerToken = bearerToken

	return v
}

// NewSuggestOrgsPayload builds a query-svc service suggest-orgs endpoint
// payload.
func NewSuggestOrgsPayload(version string, query string, bearerToken string) *querysvc.SuggestOrgsPayload {
	v := &querysvc.SuggestOrgsPayload{}
	v.Version = version
	v.Query = query
	v.BearerToken = bearerToken

	return v
}
