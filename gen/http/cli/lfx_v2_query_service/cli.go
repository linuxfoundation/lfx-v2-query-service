// Code generated by goa v3.21.1, DO NOT EDIT.
//
// lfx-v2-query-service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-query-service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	querysvcc "github.com/linuxfoundation/lfx-v2-query-service/gen/http/query_svc/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `query-svc (query-resources|query-orgs|readyz|livez)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` query-svc query-resources --version "1" --name "gov board" --parent "project:123" --type "committee" --tags '[
      "active"
   ]' --sort "updated_desc" --page-token "****" --bearer-token "eyJhbGci..."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		querySvcFlags = flag.NewFlagSet("query-svc", flag.ContinueOnError)

		querySvcQueryResourcesFlags           = flag.NewFlagSet("query-resources", flag.ExitOnError)
		querySvcQueryResourcesVersionFlag     = querySvcQueryResourcesFlags.String("version", "REQUIRED", "")
		querySvcQueryResourcesNameFlag        = querySvcQueryResourcesFlags.String("name", "", "")
		querySvcQueryResourcesParentFlag      = querySvcQueryResourcesFlags.String("parent", "", "")
		querySvcQueryResourcesTypeFlag        = querySvcQueryResourcesFlags.String("type", "", "")
		querySvcQueryResourcesTagsFlag        = querySvcQueryResourcesFlags.String("tags", "", "")
		querySvcQueryResourcesSortFlag        = querySvcQueryResourcesFlags.String("sort", "name_asc", "")
		querySvcQueryResourcesPageTokenFlag   = querySvcQueryResourcesFlags.String("page-token", "", "")
		querySvcQueryResourcesBearerTokenFlag = querySvcQueryResourcesFlags.String("bearer-token", "REQUIRED", "")

		querySvcQueryOrgsFlags           = flag.NewFlagSet("query-orgs", flag.ExitOnError)
		querySvcQueryOrgsVersionFlag     = querySvcQueryOrgsFlags.String("version", "REQUIRED", "")
		querySvcQueryOrgsNameFlag        = querySvcQueryOrgsFlags.String("name", "", "")
		querySvcQueryOrgsDomainFlag      = querySvcQueryOrgsFlags.String("domain", "", "")
		querySvcQueryOrgsBearerTokenFlag = querySvcQueryOrgsFlags.String("bearer-token", "REQUIRED", "")

		querySvcReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		querySvcLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)
	)
	querySvcFlags.Usage = querySvcUsage
	querySvcQueryResourcesFlags.Usage = querySvcQueryResourcesUsage
	querySvcQueryOrgsFlags.Usage = querySvcQueryOrgsUsage
	querySvcReadyzFlags.Usage = querySvcReadyzUsage
	querySvcLivezFlags.Usage = querySvcLivezUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "query-svc":
			svcf = querySvcFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "query-svc":
			switch epn {
			case "query-resources":
				epf = querySvcQueryResourcesFlags

			case "query-orgs":
				epf = querySvcQueryOrgsFlags

			case "readyz":
				epf = querySvcReadyzFlags

			case "livez":
				epf = querySvcLivezFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "query-svc":
			c := querysvcc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "query-resources":
				endpoint = c.QueryResources()
				data, err = querysvcc.BuildQueryResourcesPayload(*querySvcQueryResourcesVersionFlag, *querySvcQueryResourcesNameFlag, *querySvcQueryResourcesParentFlag, *querySvcQueryResourcesTypeFlag, *querySvcQueryResourcesTagsFlag, *querySvcQueryResourcesSortFlag, *querySvcQueryResourcesPageTokenFlag, *querySvcQueryResourcesBearerTokenFlag)
			case "query-orgs":
				endpoint = c.QueryOrgs()
				data, err = querysvcc.BuildQueryOrgsPayload(*querySvcQueryOrgsVersionFlag, *querySvcQueryOrgsNameFlag, *querySvcQueryOrgsDomainFlag, *querySvcQueryOrgsBearerTokenFlag)
			case "readyz":
				endpoint = c.Readyz()
			case "livez":
				endpoint = c.Livez()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// querySvcUsage displays the usage of the query-svc command and its
// subcommands.
func querySvcUsage() {
	fmt.Fprintf(os.Stderr, `The query service provides resource and user queries.
Usage:
    %[1]s [globalflags] query-svc COMMAND [flags]

COMMAND:
    query-resources: Locate resources by their type or parent, or use typeahead search to query resources by a display name or similar alias.
    query-orgs: Locate a single organization by name or domain.
    readyz: Check if the service is able to take inbound requests.
    livez: Check if the service is alive.

Additional help:
    %[1]s query-svc COMMAND --help
`, os.Args[0])
}
func querySvcQueryResourcesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] query-svc query-resources -version STRING -name STRING -parent STRING -type STRING -tags JSON -sort STRING -page-token STRING -bearer-token STRING

Locate resources by their type or parent, or use typeahead search to query resources by a display name or similar alias.
    -version STRING: 
    -name STRING: 
    -parent STRING: 
    -type STRING: 
    -tags JSON: 
    -sort STRING: 
    -page-token STRING: 
    -bearer-token STRING: 

Example:
    %[1]s query-svc query-resources --version "1" --name "gov board" --parent "project:123" --type "committee" --tags '[
      "active"
   ]' --sort "updated_desc" --page-token "****" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func querySvcQueryOrgsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] query-svc query-orgs -version STRING -name STRING -domain STRING -bearer-token STRING

Locate a single organization by name or domain.
    -version STRING: 
    -name STRING: 
    -domain STRING: 
    -bearer-token STRING: 

Example:
    %[1]s query-svc query-orgs --version "1" --name "The Linux Foundation" --domain "linuxfoundation.org" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func querySvcReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] query-svc readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s query-svc readyz
`, os.Args[0])
}

func querySvcLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] query-svc livez

Check if the service is alive.

Example:
    %[1]s query-svc livez
`, os.Args[0])
}
